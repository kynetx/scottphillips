require "#{File.dirname(__FILE__)}/data_formatter"
require 'rubygems'
require "#{File.dirname(__FILE__)}/../../lib/db_wrapper"

def data
  return DBRecordset.new([
    {"RSE" => 1001, "RF" => 801, "J_TIMESTAMP" => "20091", "DAY" => "2009-5-1"},
    {"RSE" => 1002, "RF" => 802, "J_TIMESTAMP" => "20092", "DAY" => "2009-5-2"},
    {"RSE" => 1003, "RF" => 803, "J_TIMESTAMP" => "20093", "DAY" => "2009-5-3"},
    {"RSE" => 1004, "RF" => 804, "J_TIMESTAMP" => "20094", "DAY" => "2009-5-4"},
    {"RSE" => 1005, "RF" => 805, "J_TIMESTAMP" => "20095", "DAY" => "2009-5-5"}
    ])
  
end

describe "A valid formatter" do
  before(:each) do
    @data = data
    @params = {
      :format => "table"
    }
     
   # @formatter = DataFormatter.get_formatter({}, data)
    @formatter = DataFormatter.get_formatter(@params, @data)
    
  end
  
  it "should return Generic if it's not valid" do
    @params[:format] = "dummy"
    @formatter = DataFormatter.get_formatter(@params, @data)
    @formatter.should be_a_kind_of(GenericFormatter)
  end
  
  it "should be a valid GenericFormatter" do
    @formatter.should be_a_kind_of(GenericFormatter)
  end

  it "should have the right data" do
    new_data = @formatter.do_format
    new_data.should include({"RSE" => 1001, "RF" => 801, "DAY" => "2009-5-1", "J_TIMESTAMP" => "20091"})
    new_data.length.should == 5
  end
  
end

describe PivotFormatter do
  before(:each) do
    @params = {:format => "pivot", :pivot_by => "day", :as_timestamp => "true"} 
    @formatter = DataFormatter.get_formatter(@params, data)
  end
   
  it "should be a valid PivotGenerator" do 
    @formatter.should be_a_kind_of(PivotFormatter)
    new_data = @formatter.do_format
    new_data.should be_a_kind_of(Array)    
  end
  
  it "should have the right data as a timestamp" do
    new_data = @formatter.do_format
    new_data.should include({
      "label"=>"RSE", 
      "data" => [
        [20091,1001],
        [20092,1002],
        [20093,1003],
        [20094,1004],
        [20095,1005]
        ]})
  end

  it "should have the right data as a day" do
    @params[:as_timestamp] = ""
    @formatter = DataFormatter.get_formatter(@params, data)
    new_data = @formatter.do_format
    new_data.should include({
      "label"=>"RSE", 
      "data" => [
        ["2009-5-1",1001],
        ["2009-5-2",1002],
        ["2009-5-3",1003],
        ["2009-5-4",1004],
        ["2009-5-5",1005]
        ]})
  end
  
end

describe GoogleDataTableFormatter do
  before(:all) do
    @params_t = {:format => "google_table", :as_timestamp => "true", :temporal => "day"} 
    @params_d = {:format => "google_table", :as_timestamp => "", :temporal => "day"}
    
    @formatter_t = DataFormatter.get_formatter(@params_t, data)
    @formatter_d = DataFormatter.get_formatter(@params_d, data)
    
    @data_d = @formatter_d.do_format
    @data_t = @formatter_t.do_format
  end
   
  it "should be a valid GoogleDataTableFormatter" do
    @formatter_t.should be_a_kind_of(GoogleDataTableFormatter)
    @formatter_d.should be_a_kind_of(GoogleDataTableFormatter)
    
    @data_t.should be_a_kind_of(Hash)    
    @data_d.should be_a_kind_of(Hash)    
  end
  
  it "should have columns" do
    @data_t["cols"].should_not be_nil
    @data_d["cols"].should_not be_nil
    puts "COLS_T: #{@data_t["cols"].inspect}"
    puts "COLS_D: #{@data_d["cols"].inspect}"
  end
  
  it "should have rows" do
    @data_t["rows"].should_not be_nil
    @data_d["rows"].should_not be_nil
    puts "ROWS_T: #{@data_t["rows"].inspect}"
    puts "ROWS_D: #{@data_d["rows"].inspect}"
  end
  
  it "should have 3 valid cols with timestamp" do
    @data_t["cols"].should be_a_kind_of(Array)
    @data_t["cols"].should have(3).items
    
    # should contain each of the expected elements:
    expected_cols = [
      {"id" => 'A', "label" => 'TIMESTAMP', "type" => 'number'},
      {"id" => 'B', "label" => 'RSE', "type" => 'number'},
      {"id" => 'C', "label" => 'RF', "type" => 'number'}
    ]
    expected_cols.each do |col|
      @data_t["cols"].should include(col)
    end
  
  end
  
  it "should have 3 valid cols without timestamp" do
    @data_d["cols"].should be_a_kind_of(Array)
    @data_d["cols"].should have(3).items
    expected_cols = [
      {"id" => 'A', "label" => 'DAY', "type" => 'date'},
      {"id" => 'B', "label" => 'RSE', "type" => 'number'},
      {"id" => 'C', "label" => 'RF', "type" => 'number'}
    ]
    
    expected_cols.each do |col|
      @data_d["cols"].should include(col)
    end
  end
  

  it "should have 5 valid rows with timestamp" do
    # rows should be an array
    @data_t["rows"].should be_a_kind_of(Array)
    @data_t["rows"].should have(5).items

    # the output should be:
    expected_rows = [  
      {"c" => [
        {"v"=>20091, "f" => "TIMESTAMP"}, 
        {"v"=>1001}, 
        {"v"=>801}
        ]},
      {"c" => [
        {"v"=>20092, "f" => "TIMESTAMP"}, 
        {"v"=>1002}, 
        {"v"=>802}
        ]},
      {"c" => [
        {"v"=>20093, "f" => "TIMESTAMP"}, 
        {"v"=>1003}, 
        {"v"=>803}
        ]},
      {"c" => [
        {"v"=>20094, "f" => "TIMESTAMP"}, 
        {"v"=>1004}, 
        {"v"=>804}
        ]},
      {"c" => [
        {"v"=>20095, "f" => "TIMESTAMP"}, 
        {"v"=>1005}, 
        {"v"=>805}
        ]}
      ]
    expected_rows.each { |r| @data_t["rows"].should include(r) }
  end

  it "should have 5 valid rows without timestamp" do
    # rows should be an array
    @data_d["rows"].should be_a_kind_of(Array)
    @data_d["rows"].should have(5).items
    
    # the output should be:
    expected_rows = [  
      {"c" => [
        {"v"=>"new Date(2009, 5, 1, 0, 0, 0)", "f" => "2009-5-1"}, 
        {"v"=>1001}, 
        {"v"=>801}
        ]},
      {"c" => [
        {"v"=>"new Date(2009, 5, 2, 0, 0, 0)", "f" => "2009-5-2"}, 
        {"v"=>1002}, 
        {"v"=>802}
        ]},
      {"c" => [
        {"v"=>"new Date(2009, 5, 3, 0, 0, 0)", "f" => "2009-5-3"}, 
        {"v"=>1003}, 
        {"v"=>803}
        ]},
      {"c" => [
        {"v"=>"new Date(2009, 5, 4, 0, 0, 0)", "f" => "2009-5-4"}, 
        {"v"=>1004}, 
        {"v"=>804}
        ]},
      {"c" => [
        {"v"=>"new Date(2009, 5, 5, 0, 0, 0)", "f" => "2009-5-5"}, 
        {"v"=>1005}, 
        {"v"=>805}
      ]}
    ]
    expected_rows.each { |r| @data_d["rows"].should include(r) }
  end
  
  
end